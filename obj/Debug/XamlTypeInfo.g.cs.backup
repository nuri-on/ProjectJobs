//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace ProjectJobs
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace ProjectJobs.ProjectJobs_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[21];
            _typeNameTable[0] = "ProjectJobs.Converter.TimeConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "ProjectJobs.Common.LayoutAwarePage";
            _typeNameTable[3] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[5] = "ProjectJobs.GroupedItemsPage";
            _typeNameTable[6] = "System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobsViewModel>";
            _typeNameTable[7] = "System.Collections.ObjectModel.Collection`1<ProjectJobs.viewModel.JobsViewModel>";
            _typeNameTable[8] = "ProjectJobs.viewModel.JobsViewModel";
            _typeNameTable[9] = "System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobViewModel>";
            _typeNameTable[10] = "System.Collections.ObjectModel.Collection`1<ProjectJobs.viewModel.JobViewModel>";
            _typeNameTable[11] = "ProjectJobs.viewModel.JobViewModel";
            _typeNameTable[12] = "Int32";
            _typeNameTable[13] = "String";
            _typeNameTable[14] = "Double";
            _typeNameTable[15] = "ProjectJobs.GroupDetailPage";
            _typeNameTable[16] = "ProjectJobs.Common.RichTextColumns";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.RichTextBlock";
            _typeNameTable[19] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[20] = "ProjectJobs.ItemDetailPage";

            _typeTable = new global::System.Type[21];
            _typeTable[0] = typeof(global::ProjectJobs.Converter.TimeConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::ProjectJobs.Common.LayoutAwarePage);
            _typeTable[3] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[5] = typeof(global::ProjectJobs.GroupedItemsPage);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::ProjectJobs.viewModel.JobsViewModel>);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.Collection<global::ProjectJobs.viewModel.JobsViewModel>);
            _typeTable[8] = typeof(global::ProjectJobs.viewModel.JobsViewModel);
            _typeTable[9] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::ProjectJobs.viewModel.JobViewModel>);
            _typeTable[10] = typeof(global::System.Collections.ObjectModel.Collection<global::ProjectJobs.viewModel.JobViewModel>);
            _typeTable[11] = typeof(global::ProjectJobs.viewModel.JobViewModel);
            _typeTable[12] = typeof(global::System.Int32);
            _typeTable[13] = typeof(global::System.String);
            _typeTable[14] = typeof(global::System.Double);
            _typeTable[15] = typeof(global::ProjectJobs.GroupDetailPage);
            _typeTable[16] = typeof(global::ProjectJobs.Common.RichTextColumns);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.RichTextBlock);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[20] = typeof(global::ProjectJobs.ItemDetailPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_TimeConverter() { return new global::ProjectJobs.Converter.TimeConverter(); }
        private object Activate_2_LayoutAwarePage() { return new global::ProjectJobs.Common.LayoutAwarePage(); }
        private object Activate_5_GroupedItemsPage() { return new global::ProjectJobs.GroupedItemsPage(); }
        private object Activate_6_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::ProjectJobs.viewModel.JobsViewModel>(); }
        private object Activate_7_Collection() { return new global::System.Collections.ObjectModel.Collection<global::ProjectJobs.viewModel.JobsViewModel>(); }
        private object Activate_8_JobsViewModel() { return new global::ProjectJobs.viewModel.JobsViewModel(); }
        private object Activate_9_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::ProjectJobs.viewModel.JobViewModel>(); }
        private object Activate_10_Collection() { return new global::System.Collections.ObjectModel.Collection<global::ProjectJobs.viewModel.JobViewModel>(); }
        private object Activate_11_JobViewModel() { return new global::ProjectJobs.viewModel.JobViewModel(); }
        private object Activate_15_GroupDetailPage() { return new global::ProjectJobs.GroupDetailPage(); }
        private object Activate_16_RichTextColumns() { return new global::ProjectJobs.Common.RichTextColumns(); }
        private object Activate_20_ItemDetailPage() { return new global::ProjectJobs.ItemDetailPage(); }
        private void VectorAdd_6_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ProjectJobs.viewModel.JobsViewModel>)instance;
            var newItem = (global::ProjectJobs.viewModel.JobsViewModel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ProjectJobs.viewModel.JobsViewModel>)instance;
            var newItem = (global::ProjectJobs.viewModel.JobsViewModel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_9_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ProjectJobs.viewModel.JobViewModel>)instance;
            var newItem = (global::ProjectJobs.viewModel.JobViewModel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_10_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ProjectJobs.viewModel.JobViewModel>)instance;
            var newItem = (global::ProjectJobs.viewModel.JobViewModel)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  ProjectJobs.Converter.TimeConverter
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_TimeConverter;
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  ProjectJobs.Common.LayoutAwarePage
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_2_LayoutAwarePage;
                xamlType = userType;
                break;

            case 3:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  ProjectJobs.GroupedItemsPage
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("ProjectJobs.Common.LayoutAwarePage"));
                userType.Activator = Activate_5_GroupedItemsPage;
                userType.AddMemberName("Groups");
                userType.AddMemberName("RawGroups");
                xamlType = userType;
                break;

            case 6:   //  System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobsViewModel>
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<ProjectJobs.viewModel.JobsViewModel>"));
                userType.CollectionAdd = VectorAdd_6_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.Collection`1<ProjectJobs.viewModel.JobsViewModel>
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Collection;
                userType.CollectionAdd = VectorAdd_7_Collection;
                xamlType = userType;
                break;

            case 8:   //  ProjectJobs.viewModel.JobsViewModel
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_JobsViewModel;
                userType.AddMemberName("JobsResource");
                userType.AddMemberName("JobsRawResource");
                userType.AddMemberName("Code");
                userType.AddMemberName("Title");
                xamlType = userType;
                break;

            case 9:   //  System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobViewModel>
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<ProjectJobs.viewModel.JobViewModel>"));
                userType.CollectionAdd = VectorAdd_9_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  System.Collections.ObjectModel.Collection`1<ProjectJobs.viewModel.JobViewModel>
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_Collection;
                userType.CollectionAdd = VectorAdd_10_Collection;
                xamlType = userType;
                break;

            case 11:   //  ProjectJobs.viewModel.JobViewModel
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_JobViewModel;
                userType.AddMemberName("Id");
                userType.AddMemberName("GroupCode");
                userType.AddMemberName("Url");
                userType.AddMemberName("CompanyName");
                userType.AddMemberName("Active");
                userType.AddMemberName("PostingTimestamp");
                userType.AddMemberName("ModificationTimestamp");
                userType.AddMemberName("OpeningTimestamp");
                userType.AddMemberName("ExpirationDateTime");
                userType.AddMemberName("ExpirationTimestamp");
                userType.AddMemberName("Position");
                userType.AddMemberName("Title");
                userType.AddMemberName("Location");
                userType.AddMemberName("JobType");
                userType.AddMemberName("Industry");
                userType.AddMemberName("JobCategory");
                userType.AddMemberName("OpenQuantity");
                userType.AddMemberName("ExperienceLevel");
                userType.AddMemberName("RequiredEducationLevel");
                userType.AddMemberName("Keyword");
                userType.AddMemberName("Salary");
                xamlType = userType;
                break;

            case 12:   //  Int32
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  String
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Double
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  ProjectJobs.GroupDetailPage
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("ProjectJobs.Common.LayoutAwarePage"));
                userType.Activator = Activate_15_GroupDetailPage;
                userType.AddMemberName("Groups");
                xamlType = userType;
                break;

            case 16:   //  ProjectJobs.Common.RichTextColumns
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_16_RichTextColumns;
                userType.SetContentPropertyName("ProjectJobs.Common.RichTextColumns.RichTextContent");
                userType.AddMemberName("RichTextContent");
                userType.AddMemberName("ColumnTemplate");
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.Controls.RichTextBlock
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  ProjectJobs.ItemDetailPage
                userType = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("ProjectJobs.Common.LayoutAwarePage"));
                userType.Activator = Activate_20_ItemDetailPage;
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_GroupedItemsPage_Groups(object instance)
        {
            var that = (global::ProjectJobs.GroupedItemsPage)instance;
            return that.Groups;
        }
        private object get_1_JobsViewModel_JobsResource(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobsViewModel)instance;
            return that.JobsResource;
        }
        private object get_2_JobViewModel_Id(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Id;
        }
        private void set_2_JobViewModel_Id(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Id = (global::System.Int32)Value;
        }
        private object get_3_JobViewModel_GroupCode(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.GroupCode;
        }
        private void set_3_JobViewModel_GroupCode(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.GroupCode = (global::System.Int32)Value;
        }
        private object get_4_JobViewModel_Url(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Url;
        }
        private void set_4_JobViewModel_Url(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Url = (global::System.String)Value;
        }
        private object get_5_JobViewModel_CompanyName(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.CompanyName;
        }
        private void set_5_JobViewModel_CompanyName(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.CompanyName = (global::System.String)Value;
        }
        private object get_6_JobViewModel_Active(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Active;
        }
        private void set_6_JobViewModel_Active(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Active = (global::System.Int32)Value;
        }
        private object get_7_JobViewModel_PostingTimestamp(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.PostingTimestamp;
        }
        private void set_7_JobViewModel_PostingTimestamp(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.PostingTimestamp = (global::System.Int32)Value;
        }
        private object get_8_JobViewModel_ModificationTimestamp(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.ModificationTimestamp;
        }
        private void set_8_JobViewModel_ModificationTimestamp(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.ModificationTimestamp = (global::System.Int32)Value;
        }
        private object get_9_JobViewModel_OpeningTimestamp(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.OpeningTimestamp;
        }
        private void set_9_JobViewModel_OpeningTimestamp(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.OpeningTimestamp = (global::System.Int32)Value;
        }
        private object get_10_JobViewModel_ExpirationDateTime(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.ExpirationDateTime;
        }
        private object get_11_JobViewModel_ExpirationTimestamp(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.ExpirationTimestamp;
        }
        private void set_11_JobViewModel_ExpirationTimestamp(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.ExpirationTimestamp = (global::System.Double)Value;
        }
        private object get_12_JobViewModel_Position(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Position;
        }
        private void set_12_JobViewModel_Position(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Position = (global::System.String)Value;
        }
        private object get_13_JobViewModel_Title(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Title;
        }
        private void set_13_JobViewModel_Title(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_14_JobViewModel_Location(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Location;
        }
        private void set_14_JobViewModel_Location(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Location = (global::System.String)Value;
        }
        private object get_15_JobViewModel_JobType(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.JobType;
        }
        private void set_15_JobViewModel_JobType(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.JobType = (global::System.String)Value;
        }
        private object get_16_JobViewModel_Industry(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Industry;
        }
        private void set_16_JobViewModel_Industry(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Industry = (global::System.String)Value;
        }
        private object get_17_JobViewModel_JobCategory(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.JobCategory;
        }
        private void set_17_JobViewModel_JobCategory(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.JobCategory = (global::System.String)Value;
        }
        private object get_18_JobViewModel_OpenQuantity(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.OpenQuantity;
        }
        private void set_18_JobViewModel_OpenQuantity(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.OpenQuantity = (global::System.Int32)Value;
        }
        private object get_19_JobViewModel_ExperienceLevel(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.ExperienceLevel;
        }
        private void set_19_JobViewModel_ExperienceLevel(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.ExperienceLevel = (global::System.String)Value;
        }
        private object get_20_JobViewModel_RequiredEducationLevel(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.RequiredEducationLevel;
        }
        private void set_20_JobViewModel_RequiredEducationLevel(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.RequiredEducationLevel = (global::System.String)Value;
        }
        private object get_21_JobViewModel_Keyword(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Keyword;
        }
        private void set_21_JobViewModel_Keyword(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Keyword = (global::System.String)Value;
        }
        private object get_22_JobViewModel_Salary(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            return that.Salary;
        }
        private void set_22_JobViewModel_Salary(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobViewModel)instance;
            that.Salary = (global::System.String)Value;
        }
        private object get_23_JobsViewModel_JobsRawResource(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobsViewModel)instance;
            return that.JobsRawResource;
        }
        private object get_24_JobsViewModel_Code(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobsViewModel)instance;
            return that.Code;
        }
        private void set_24_JobsViewModel_Code(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobsViewModel)instance;
            that.Code = (global::System.Int32)Value;
        }
        private object get_25_JobsViewModel_Title(object instance)
        {
            var that = (global::ProjectJobs.viewModel.JobsViewModel)instance;
            return that.Title;
        }
        private void set_25_JobsViewModel_Title(object instance, object Value)
        {
            var that = (global::ProjectJobs.viewModel.JobsViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_26_GroupedItemsPage_RawGroups(object instance)
        {
            var that = (global::ProjectJobs.GroupedItemsPage)instance;
            return that.RawGroups;
        }
        private object get_27_GroupDetailPage_Groups(object instance)
        {
            var that = (global::ProjectJobs.GroupDetailPage)instance;
            return that.Groups;
        }
        private object get_28_RichTextColumns_RichTextContent(object instance)
        {
            var that = (global::ProjectJobs.Common.RichTextColumns)instance;
            return that.RichTextContent;
        }
        private void set_28_RichTextColumns_RichTextContent(object instance, object Value)
        {
            var that = (global::ProjectJobs.Common.RichTextColumns)instance;
            that.RichTextContent = (global::Windows.UI.Xaml.Controls.RichTextBlock)Value;
        }
        private object get_29_RichTextColumns_ColumnTemplate(object instance)
        {
            var that = (global::ProjectJobs.Common.RichTextColumns)instance;
            return that.ColumnTemplate;
        }
        private void set_29_RichTextColumns_ColumnTemplate(object instance, object Value)
        {
            var that = (global::ProjectJobs.Common.RichTextColumns)instance;
            that.ColumnTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember xamlMember = null;
            global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "ProjectJobs.GroupedItemsPage.Groups":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.GroupedItemsPage");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Groups", "System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobsViewModel>");
                xamlMember.Getter = get_0_GroupedItemsPage_Groups;
                xamlMember.SetIsReadOnly();
                break;
            case "ProjectJobs.viewModel.JobsViewModel.JobsResource":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobsViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "JobsResource", "System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobViewModel>");
                xamlMember.Getter = get_1_JobsViewModel_JobsResource;
                xamlMember.SetIsReadOnly();
                break;
            case "ProjectJobs.viewModel.JobViewModel.Id":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_2_JobViewModel_Id;
                xamlMember.Setter = set_2_JobViewModel_Id;
                break;
            case "ProjectJobs.viewModel.JobViewModel.GroupCode":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "GroupCode", "Int32");
                xamlMember.Getter = get_3_JobViewModel_GroupCode;
                xamlMember.Setter = set_3_JobViewModel_GroupCode;
                break;
            case "ProjectJobs.viewModel.JobViewModel.Url":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Url", "String");
                xamlMember.Getter = get_4_JobViewModel_Url;
                xamlMember.Setter = set_4_JobViewModel_Url;
                break;
            case "ProjectJobs.viewModel.JobViewModel.CompanyName":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "CompanyName", "String");
                xamlMember.Getter = get_5_JobViewModel_CompanyName;
                xamlMember.Setter = set_5_JobViewModel_CompanyName;
                break;
            case "ProjectJobs.viewModel.JobViewModel.Active":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Active", "Int32");
                xamlMember.Getter = get_6_JobViewModel_Active;
                xamlMember.Setter = set_6_JobViewModel_Active;
                break;
            case "ProjectJobs.viewModel.JobViewModel.PostingTimestamp":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "PostingTimestamp", "Int32");
                xamlMember.Getter = get_7_JobViewModel_PostingTimestamp;
                xamlMember.Setter = set_7_JobViewModel_PostingTimestamp;
                break;
            case "ProjectJobs.viewModel.JobViewModel.ModificationTimestamp":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "ModificationTimestamp", "Int32");
                xamlMember.Getter = get_8_JobViewModel_ModificationTimestamp;
                xamlMember.Setter = set_8_JobViewModel_ModificationTimestamp;
                break;
            case "ProjectJobs.viewModel.JobViewModel.OpeningTimestamp":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "OpeningTimestamp", "Int32");
                xamlMember.Getter = get_9_JobViewModel_OpeningTimestamp;
                xamlMember.Setter = set_9_JobViewModel_OpeningTimestamp;
                break;
            case "ProjectJobs.viewModel.JobViewModel.ExpirationDateTime":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "ExpirationDateTime", "String");
                xamlMember.Getter = get_10_JobViewModel_ExpirationDateTime;
                xamlMember.SetIsReadOnly();
                break;
            case "ProjectJobs.viewModel.JobViewModel.ExpirationTimestamp":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "ExpirationTimestamp", "Double");
                xamlMember.Getter = get_11_JobViewModel_ExpirationTimestamp;
                xamlMember.Setter = set_11_JobViewModel_ExpirationTimestamp;
                break;
            case "ProjectJobs.viewModel.JobViewModel.Position":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Position", "String");
                xamlMember.Getter = get_12_JobViewModel_Position;
                xamlMember.Setter = set_12_JobViewModel_Position;
                break;
            case "ProjectJobs.viewModel.JobViewModel.Title":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_13_JobViewModel_Title;
                xamlMember.Setter = set_13_JobViewModel_Title;
                break;
            case "ProjectJobs.viewModel.JobViewModel.Location":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Location", "String");
                xamlMember.Getter = get_14_JobViewModel_Location;
                xamlMember.Setter = set_14_JobViewModel_Location;
                break;
            case "ProjectJobs.viewModel.JobViewModel.JobType":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "JobType", "String");
                xamlMember.Getter = get_15_JobViewModel_JobType;
                xamlMember.Setter = set_15_JobViewModel_JobType;
                break;
            case "ProjectJobs.viewModel.JobViewModel.Industry":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Industry", "String");
                xamlMember.Getter = get_16_JobViewModel_Industry;
                xamlMember.Setter = set_16_JobViewModel_Industry;
                break;
            case "ProjectJobs.viewModel.JobViewModel.JobCategory":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "JobCategory", "String");
                xamlMember.Getter = get_17_JobViewModel_JobCategory;
                xamlMember.Setter = set_17_JobViewModel_JobCategory;
                break;
            case "ProjectJobs.viewModel.JobViewModel.OpenQuantity":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "OpenQuantity", "Int32");
                xamlMember.Getter = get_18_JobViewModel_OpenQuantity;
                xamlMember.Setter = set_18_JobViewModel_OpenQuantity;
                break;
            case "ProjectJobs.viewModel.JobViewModel.ExperienceLevel":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "ExperienceLevel", "String");
                xamlMember.Getter = get_19_JobViewModel_ExperienceLevel;
                xamlMember.Setter = set_19_JobViewModel_ExperienceLevel;
                break;
            case "ProjectJobs.viewModel.JobViewModel.RequiredEducationLevel":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "RequiredEducationLevel", "String");
                xamlMember.Getter = get_20_JobViewModel_RequiredEducationLevel;
                xamlMember.Setter = set_20_JobViewModel_RequiredEducationLevel;
                break;
            case "ProjectJobs.viewModel.JobViewModel.Keyword":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Keyword", "String");
                xamlMember.Getter = get_21_JobViewModel_Keyword;
                xamlMember.Setter = set_21_JobViewModel_Keyword;
                break;
            case "ProjectJobs.viewModel.JobViewModel.Salary":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Salary", "String");
                xamlMember.Getter = get_22_JobViewModel_Salary;
                xamlMember.Setter = set_22_JobViewModel_Salary;
                break;
            case "ProjectJobs.viewModel.JobsViewModel.JobsRawResource":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobsViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "JobsRawResource", "System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobViewModel>");
                xamlMember.Getter = get_23_JobsViewModel_JobsRawResource;
                xamlMember.SetIsReadOnly();
                break;
            case "ProjectJobs.viewModel.JobsViewModel.Code":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobsViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Code", "Int32");
                xamlMember.Getter = get_24_JobsViewModel_Code;
                xamlMember.Setter = set_24_JobsViewModel_Code;
                break;
            case "ProjectJobs.viewModel.JobsViewModel.Title":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.viewModel.JobsViewModel");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_25_JobsViewModel_Title;
                xamlMember.Setter = set_25_JobsViewModel_Title;
                break;
            case "ProjectJobs.GroupedItemsPage.RawGroups":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.GroupedItemsPage");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "RawGroups", "System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobsViewModel>");
                xamlMember.Getter = get_26_GroupedItemsPage_RawGroups;
                xamlMember.SetIsReadOnly();
                break;
            case "ProjectJobs.GroupDetailPage.Groups":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.GroupDetailPage");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "Groups", "System.Collections.ObjectModel.ObservableCollection`1<ProjectJobs.viewModel.JobsViewModel>");
                xamlMember.Getter = get_27_GroupDetailPage_Groups;
                xamlMember.SetIsReadOnly();
                break;
            case "ProjectJobs.Common.RichTextColumns.RichTextContent":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.Common.RichTextColumns");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "RichTextContent", "Windows.UI.Xaml.Controls.RichTextBlock");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_RichTextColumns_RichTextContent;
                xamlMember.Setter = set_28_RichTextColumns_RichTextContent;
                break;
            case "ProjectJobs.Common.RichTextColumns.ColumnTemplate":
                userType = (global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ProjectJobs.Common.RichTextColumns");
                xamlMember = new global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlMember(this, "ColumnTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_RichTextColumns_ColumnTemplate;
                xamlMember.Setter = set_29_RichTextColumns_ColumnTemplate;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlSystemBaseType
    {
        global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ProjectJobs.ProjectJobs_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


